struct url {
  uint8_t *scheme;
  int schemelen;
  uint8_t *opaque;
  int opaquelen;
  uint64_t pad;
  uint8_t *host;
  int hostlen;
  uint8_t *path;
  int pathlen;
};

struct request {
  uint8_t *method;
  int methodlen;
  struct url *url;
};

struct response {
  uint8_t *statusstr;
  uint8_t *statusstrlen;
  int statuscode;
};


uprobe:{{ .ExePath }}:runtime.execute {
	// map thread id to goroutine id
	@gids[tid] = {{ .Arg 0 }}
}

tracepoint:sched:sched_process_exit {
  delete(@rmethod[@gids[tid], pid]);
  delete(@rscheme[@gids[tid], pid]);
  delete(@rhost[@gids[tid], pid]);
  delete(@rpath[@gids[tid], pid]);
  delete(@gids[tid]);
}

uprobe:{{ .ExePath }}:"net/http.(*Client).do" {
  $request = ((struct request *){{ .Arg 1 }});
  $url = $request->url;
  $method = str($request->method, $request->methodlen);
  $scheme = str($url->scheme, $url->schemelen);
  $host = str($url->host, $url->hostlen);
  $path = str($url->path, $url->pathlen);

  @rmethod[@gids[tid], pid] = $method;
  @rscheme[@gids[tid], pid] = $scheme;
  @rhost[@gids[tid], pid] = $host;
  @rpath[@gids[tid], pid] = $path;
}
{{range $index, $r := $.SymbolReturns "net/http.(*Client).do" -}}
{{ if $index }}, {{ end }}
uprobe:{{ $.ExePath }}:"net/http.(*Client).do" + {{ $r -}}
{{ end }} {
  $resp = (struct response *){{ .RetArg 0 2 }};

  if ($resp == 0) {
    printf("error %s %s://%s%s\n",
      @rmethod[@gids[tid], pid],
      @rscheme[@gids[tid], pid],
      @rhost[@gids[tid], pid],
      @rpath[@gids[tid], pid]);
  } else {
    printf("%d: %s %s://%s%s\n",
      $resp->statuscode,
      @rmethod[@gids[tid], pid],
      @rscheme[@gids[tid], pid],
      @rhost[@gids[tid], pid],
      @rpath[@gids[tid], pid]);
  }
  print(ustack());
}
